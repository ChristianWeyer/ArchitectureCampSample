//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTestClient.SessionServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Speaker", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Speaker : ServiceTestClient.SessionServiceReference.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PhotoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bio {
            get {
                return this.BioField;
            }
            set {
                if ((object.ReferenceEquals(this.BioField, value) != true)) {
                    this.BioField = value;
                    this.RaisePropertyChanged("Bio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMail {
            get {
                return this.EMailField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailField, value) != true)) {
                    this.EMailField = value;
                    this.RaisePropertyChanged("EMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Photo {
            get {
                return this.PhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoField, value) != true)) {
                    this.PhotoField = value;
                    this.RaisePropertyChanged("Photo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityBase", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.SessionBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Track))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.KeyNote))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Workshop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Session))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Rating))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Slot))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Speaker))]
    public partial class EntityBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionBase", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.KeyNote))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Workshop))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceTestClient.SessionServiceReference.Session))]
    public partial class SessionBase : ServiceTestClient.SessionServiceReference.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbstractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceTestClient.SessionServiceReference.Schedule ScheduleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceTestClient.SessionServiceReference.Speaker Speaker1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Speaker1IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceTestClient.SessionServiceReference.Speaker Speaker2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Speaker2IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> TracksField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abstract {
            get {
                return this.AbstractField;
            }
            set {
                if ((object.ReferenceEquals(this.AbstractField, value) != true)) {
                    this.AbstractField = value;
                    this.RaisePropertyChanged("Abstract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceTestClient.SessionServiceReference.Schedule Schedule {
            get {
                return this.ScheduleField;
            }
            set {
                if ((object.ReferenceEquals(this.ScheduleField, value) != true)) {
                    this.ScheduleField = value;
                    this.RaisePropertyChanged("Schedule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceTestClient.SessionServiceReference.Speaker Speaker1 {
            get {
                return this.Speaker1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Speaker1Field, value) != true)) {
                    this.Speaker1Field = value;
                    this.RaisePropertyChanged("Speaker1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speaker1Id {
            get {
                return this.Speaker1IdField;
            }
            set {
                if ((this.Speaker1IdField.Equals(value) != true)) {
                    this.Speaker1IdField = value;
                    this.RaisePropertyChanged("Speaker1Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceTestClient.SessionServiceReference.Speaker Speaker2 {
            get {
                return this.Speaker2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Speaker2Field, value) != true)) {
                    this.Speaker2Field = value;
                    this.RaisePropertyChanged("Speaker2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speaker2Id {
            get {
                return this.Speaker2IdField;
            }
            set {
                if ((this.Speaker2IdField.Equals(value) != true)) {
                    this.Speaker2IdField = value;
                    this.RaisePropertyChanged("Speaker2Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> Tracks {
            get {
                return this.TracksField;
            }
            set {
                if ((object.ReferenceEquals(this.TracksField, value) != true)) {
                    this.TracksField = value;
                    this.RaisePropertyChanged("Tracks");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Track : ServiceTestClient.SessionServiceReference.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyNote", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class KeyNote : ServiceTestClient.SessionServiceReference.SessionBase {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Workshop", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Workshop : ServiceTestClient.SessionServiceReference.SessionBase {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Session : ServiceTestClient.SessionServiceReference.SessionBase {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rating", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Rating : ServiceTestClient.SessionServiceReference.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpeakerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpeakerId {
            get {
                return this.SpeakerIdField;
            }
            set {
                if ((this.SpeakerIdField.Equals(value) != true)) {
                    this.SpeakerIdField = value;
                    this.RaisePropertyChanged("SpeakerId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Slot", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Slot : ServiceTestClient.SessionServiceReference.EntityBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBreakField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBreak {
            get {
                return this.IsBreakField;
            }
            set {
                if ((this.IsBreakField.Equals(value) != true)) {
                    this.IsBreakField = value;
                    this.RaisePropertyChanged("IsBreak");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Schedule", Namespace="http://schemas.datacontract.org/2004/07/EndToEnd.DataLayer.Models")]
    [System.SerializableAttribute()]
    public partial class Schedule : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Room {
            get {
                return this.RoomField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomField, value) != true)) {
                    this.RoomField = value;
                    this.RaisePropertyChanged("Room");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionDto", Namespace="http://schemas.datacontract.org/2004/07/BusinessLayer.Models")]
    [System.SerializableAttribute()]
    public partial class SessionDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbstractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> RatingIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionBaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Speaker1IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Speaker2IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> TrackIdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abstract {
            get {
                return this.AbstractField;
            }
            set {
                if ((object.ReferenceEquals(this.AbstractField, value) != true)) {
                    this.AbstractField = value;
                    this.RaisePropertyChanged("Abstract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> RatingIds {
            get {
                return this.RatingIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.RatingIdsField, value) != true)) {
                    this.RatingIdsField = value;
                    this.RaisePropertyChanged("RatingIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Room {
            get {
                return this.RoomField;
            }
            set {
                if ((object.ReferenceEquals(this.RoomField, value) != true)) {
                    this.RoomField = value;
                    this.RaisePropertyChanged("Room");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionBaseId {
            get {
                return this.SessionBaseIdField;
            }
            set {
                if ((this.SessionBaseIdField.Equals(value) != true)) {
                    this.SessionBaseIdField = value;
                    this.RaisePropertyChanged("SessionBaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionType {
            get {
                return this.SessionTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionTypeField, value) != true)) {
                    this.SessionTypeField = value;
                    this.RaisePropertyChanged("SessionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speaker1Id {
            get {
                return this.Speaker1IdField;
            }
            set {
                if ((this.Speaker1IdField.Equals(value) != true)) {
                    this.Speaker1IdField = value;
                    this.RaisePropertyChanged("Speaker1Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speaker2Id {
            get {
                return this.Speaker2IdField;
            }
            set {
                if ((this.Speaker2IdField.Equals(value) != true)) {
                    this.Speaker2IdField = value;
                    this.RaisePropertyChanged("Speaker2Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> TrackIds {
            get {
                return this.TrackIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackIdsField, value) != true)) {
                    this.TrackIdsField = value;
                    this.RaisePropertyChanged("TrackIds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayer")]
    [System.SerializableAttribute()]
    public partial class FaultMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InnerExceptionMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InnerExceptionMessage {
            get {
                return this.InnerExceptionMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerExceptionMessageField, value) != true)) {
                    this.InnerExceptionMessageField = value;
                    this.RaisePropertyChanged("InnerExceptionMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SessionServiceReference.ISessionService")]
    public interface ISessionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetSpeakerList", ReplyAction="http://tempuri.org/ISessionService/GetSpeakerListResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Speaker> GetSpeakerList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetSpeakerList", ReplyAction="http://tempuri.org/ISessionService/GetSpeakerListResponse")]
        System.IAsyncResult BeginGetSpeakerList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Speaker> EndGetSpeakerList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetSpeakerById", ReplyAction="http://tempuri.org/ISessionService/GetSpeakerByIdResponse")]
        ServiceTestClient.SessionServiceReference.Speaker GetSpeakerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetSpeakerById", ReplyAction="http://tempuri.org/ISessionService/GetSpeakerByIdResponse")]
        System.IAsyncResult BeginGetSpeakerById(int id, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Speaker EndGetSpeakerById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/SearchSpeakerByName", ReplyAction="http://tempuri.org/ISessionService/SearchSpeakerByNameResponse")]
        ServiceTestClient.SessionServiceReference.Speaker SearchSpeakerByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/SearchSpeakerByName", ReplyAction="http://tempuri.org/ISessionService/SearchSpeakerByNameResponse")]
        System.IAsyncResult BeginSearchSpeakerByName(string name, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Speaker EndSearchSpeakerByName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AddSpeaker", ReplyAction="http://tempuri.org/ISessionService/AddSpeakerResponse")]
        ServiceTestClient.SessionServiceReference.Speaker AddSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AddSpeaker", ReplyAction="http://tempuri.org/ISessionService/AddSpeakerResponse")]
        System.IAsyncResult BeginAddSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Speaker EndAddSpeaker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/UpdateSpeaker", ReplyAction="http://tempuri.org/ISessionService/UpdateSpeakerResponse")]
        void UpdateSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/UpdateSpeaker", ReplyAction="http://tempuri.org/ISessionService/UpdateSpeakerResponse")]
        System.IAsyncResult BeginUpdateSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateSpeaker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/DeleteSpeaker", ReplyAction="http://tempuri.org/ISessionService/DeleteSpeakerResponse")]
        void DeleteSpeaker(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/DeleteSpeaker", ReplyAction="http://tempuri.org/ISessionService/DeleteSpeakerResponse")]
        System.IAsyncResult BeginDeleteSpeaker(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteSpeaker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetSessionList", ReplyAction="http://tempuri.org/ISessionService/GetSessionListResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.SessionDto> GetSessionList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetSessionList", ReplyAction="http://tempuri.org/ISessionService/GetSessionListResponse")]
        System.IAsyncResult BeginGetSessionList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.SessionDto> EndGetSessionList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetSessionById", ReplyAction="http://tempuri.org/ISessionService/GetSessionByIdResponse")]
        ServiceTestClient.SessionServiceReference.SessionDto GetSessionById(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetSessionById", ReplyAction="http://tempuri.org/ISessionService/GetSessionByIdResponse")]
        System.IAsyncResult BeginGetSessionById(int id, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.SessionDto EndGetSessionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/SearchSessionByTitle", ReplyAction="http://tempuri.org/ISessionService/SearchSessionByTitleResponse")]
        ServiceTestClient.SessionServiceReference.SessionDto SearchSessionByTitle(string title);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/SearchSessionByTitle", ReplyAction="http://tempuri.org/ISessionService/SearchSessionByTitleResponse")]
        System.IAsyncResult BeginSearchSessionByTitle(string title, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.SessionDto EndSearchSessionByTitle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AddSession", ReplyAction="http://tempuri.org/ISessionService/AddSessionResponse")]
        ServiceTestClient.SessionServiceReference.SessionDto AddSession(ServiceTestClient.SessionServiceReference.SessionDto session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AddSession", ReplyAction="http://tempuri.org/ISessionService/AddSessionResponse")]
        System.IAsyncResult BeginAddSession(ServiceTestClient.SessionServiceReference.SessionDto session, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.SessionDto EndAddSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/UpdateSession", ReplyAction="http://tempuri.org/ISessionService/UpdateSessionResponse")]
        void UpdateSession(ServiceTestClient.SessionServiceReference.SessionDto session);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/UpdateSession", ReplyAction="http://tempuri.org/ISessionService/UpdateSessionResponse")]
        System.IAsyncResult BeginUpdateSession(ServiceTestClient.SessionServiceReference.SessionDto session, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/DeleteSession", ReplyAction="http://tempuri.org/ISessionService/DeleteSessionResponse")]
        void DeleteSession(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/DeleteSession", ReplyAction="http://tempuri.org/ISessionService/DeleteSessionResponse")]
        System.IAsyncResult BeginDeleteSession(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetSessionTypes", ReplyAction="http://tempuri.org/ISessionService/GetSessionTypesResponse")]
        System.Collections.Generic.List<string> GetSessionTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetSessionTypes", ReplyAction="http://tempuri.org/ISessionService/GetSessionTypesResponse")]
        System.IAsyncResult BeginGetSessionTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetSessionTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetTrackList", ReplyAction="http://tempuri.org/ISessionService/GetTrackListResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> GetTrackList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetTrackList", ReplyAction="http://tempuri.org/ISessionService/GetTrackListResponse")]
        System.IAsyncResult BeginGetTrackList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> EndGetTrackList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetTrackById", ReplyAction="http://tempuri.org/ISessionService/GetTrackByIdResponse")]
        ServiceTestClient.SessionServiceReference.Track GetTrackById(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetTrackById", ReplyAction="http://tempuri.org/ISessionService/GetTrackByIdResponse")]
        System.IAsyncResult BeginGetTrackById(int id, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Track EndGetTrackById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/SearchTrackByName", ReplyAction="http://tempuri.org/ISessionService/SearchTrackByNameResponse")]
        ServiceTestClient.SessionServiceReference.Track SearchTrackByName(string track);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/SearchTrackByName", ReplyAction="http://tempuri.org/ISessionService/SearchTrackByNameResponse")]
        System.IAsyncResult BeginSearchTrackByName(string track, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Track EndSearchTrackByName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AddTrack", ReplyAction="http://tempuri.org/ISessionService/AddTrackResponse")]
        ServiceTestClient.SessionServiceReference.Track AddTrack(ServiceTestClient.SessionServiceReference.Track track);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AddTrack", ReplyAction="http://tempuri.org/ISessionService/AddTrackResponse")]
        System.IAsyncResult BeginAddTrack(ServiceTestClient.SessionServiceReference.Track track, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Track EndAddTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/UpdateTrack", ReplyAction="http://tempuri.org/ISessionService/UpdateTrackResponse")]
        void UpdateTrack(ServiceTestClient.SessionServiceReference.Track track);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/UpdateTrack", ReplyAction="http://tempuri.org/ISessionService/UpdateTrackResponse")]
        System.IAsyncResult BeginUpdateTrack(ServiceTestClient.SessionServiceReference.Track track, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/DeleteTrack", ReplyAction="http://tempuri.org/ISessionService/DeleteTrackResponse")]
        void DeleteTrack(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/DeleteTrack", ReplyAction="http://tempuri.org/ISessionService/DeleteTrackResponse")]
        System.IAsyncResult BeginDeleteTrack(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/SearchTrackTypeByName", ReplyAction="http://tempuri.org/ISessionService/SearchTrackTypeByNameResponse")]
        ServiceTestClient.SessionServiceReference.Track SearchTrackTypeByName(string track);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/SearchTrackTypeByName", ReplyAction="http://tempuri.org/ISessionService/SearchTrackTypeByNameResponse")]
        System.IAsyncResult BeginSearchTrackTypeByName(string track, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Track EndSearchTrackTypeByName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetRatingList", ReplyAction="http://tempuri.org/ISessionService/GetRatingListResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Rating> GetRatingList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetRatingList", ReplyAction="http://tempuri.org/ISessionService/GetRatingListResponse")]
        System.IAsyncResult BeginGetRatingList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Rating> EndGetRatingList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetRatingById", ReplyAction="http://tempuri.org/ISessionService/GetRatingByIdResponse")]
        ServiceTestClient.SessionServiceReference.Rating GetRatingById(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetRatingById", ReplyAction="http://tempuri.org/ISessionService/GetRatingByIdResponse")]
        System.IAsyncResult BeginGetRatingById(int id, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Rating EndGetRatingById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AddRating", ReplyAction="http://tempuri.org/ISessionService/AddRatingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ServiceTestClient.SessionServiceReference.FaultMessage), Action="http://tempuri.org/ISessionService/AddRatingFaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/ServiceLayer")]
        ServiceTestClient.SessionServiceReference.Rating AddRating(ServiceTestClient.SessionServiceReference.Rating rating);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AddRating", ReplyAction="http://tempuri.org/ISessionService/AddRatingResponse")]
        System.IAsyncResult BeginAddRating(ServiceTestClient.SessionServiceReference.Rating rating, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Rating EndAddRating(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/UpdateRating", ReplyAction="http://tempuri.org/ISessionService/UpdateRatingResponse")]
        void UpdateRating(ServiceTestClient.SessionServiceReference.Rating rating);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/UpdateRating", ReplyAction="http://tempuri.org/ISessionService/UpdateRatingResponse")]
        System.IAsyncResult BeginUpdateRating(ServiceTestClient.SessionServiceReference.Rating rating, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateRating(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/DeleteRating", ReplyAction="http://tempuri.org/ISessionService/DeleteRatingResponse")]
        void DeleteRating(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/DeleteRating", ReplyAction="http://tempuri.org/ISessionService/DeleteRatingResponse")]
        System.IAsyncResult BeginDeleteRating(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteRating(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetScheduleList", ReplyAction="http://tempuri.org/ISessionService/GetScheduleListResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Schedule> GetScheduleList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetScheduleList", ReplyAction="http://tempuri.org/ISessionService/GetScheduleListResponse")]
        System.IAsyncResult BeginGetScheduleList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Schedule> EndGetScheduleList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetScheduleById", ReplyAction="http://tempuri.org/ISessionService/GetScheduleByIdResponse")]
        ServiceTestClient.SessionServiceReference.Schedule GetScheduleById(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetScheduleById", ReplyAction="http://tempuri.org/ISessionService/GetScheduleByIdResponse")]
        System.IAsyncResult BeginGetScheduleById(int id, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Schedule EndGetScheduleById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AddSchedule", ReplyAction="http://tempuri.org/ISessionService/AddScheduleResponse")]
        ServiceTestClient.SessionServiceReference.Schedule AddSchedule(int id, ServiceTestClient.SessionServiceReference.Schedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AddSchedule", ReplyAction="http://tempuri.org/ISessionService/AddScheduleResponse")]
        System.IAsyncResult BeginAddSchedule(int id, ServiceTestClient.SessionServiceReference.Schedule schedule, System.AsyncCallback callback, object asyncState);
        
        ServiceTestClient.SessionServiceReference.Schedule EndAddSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/DeleteSchedule", ReplyAction="http://tempuri.org/ISessionService/DeleteScheduleResponse")]
        void DeleteSchedule(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/DeleteSchedule", ReplyAction="http://tempuri.org/ISessionService/DeleteScheduleResponse")]
        System.IAsyncResult BeginDeleteSchedule(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteSchedule(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AllSlots", ReplyAction="http://tempuri.org/ISessionService/AllSlotsResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> AllSlots();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AllSlots", ReplyAction="http://tempuri.org/ISessionService/AllSlotsResponse")]
        System.IAsyncResult BeginAllSlots(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndAllSlots(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AllBreaks", ReplyAction="http://tempuri.org/ISessionService/AllBreaksResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> AllBreaks();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AllBreaks", ReplyAction="http://tempuri.org/ISessionService/AllBreaksResponse")]
        System.IAsyncResult BeginAllBreaks(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndAllBreaks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/AllAssignableSlots", ReplyAction="http://tempuri.org/ISessionService/AllAssignableSlotsResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> AllAssignableSlots();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/AllAssignableSlots", ReplyAction="http://tempuri.org/ISessionService/AllAssignableSlotsResponse")]
        System.IAsyncResult BeginAllAssignableSlots(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndAllAssignableSlots(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionService/GetNotAssignedSlots", ReplyAction="http://tempuri.org/ISessionService/GetNotAssignedSlotsResponse")]
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> GetNotAssignedSlots();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISessionService/GetNotAssignedSlots", ReplyAction="http://tempuri.org/ISessionService/GetNotAssignedSlotsResponse")]
        System.IAsyncResult BeginGetNotAssignedSlots(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndGetNotAssignedSlots(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionServiceChannel : ServiceTestClient.SessionServiceReference.ISessionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSpeakerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpeakerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Speaker> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Speaker>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSpeakerByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpeakerByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Speaker Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Speaker)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchSpeakerByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchSpeakerByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Speaker Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Speaker)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSpeakerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSpeakerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Speaker Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Speaker)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.SessionDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.SessionDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.SessionDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.SessionDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchSessionByTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchSessionByTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.SessionDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.SessionDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.SessionDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.SessionDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrackListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrackListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrackByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrackByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Track Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Track)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchTrackByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchTrackByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Track Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Track)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Track Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Track)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchTrackTypeByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchTrackTypeByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Track Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Track)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRatingListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRatingListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Rating> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Rating>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRatingByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRatingByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Rating Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Rating)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Rating Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Rating)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScheduleListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScheduleListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Schedule> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Schedule>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScheduleByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScheduleByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Schedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Schedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ServiceTestClient.SessionServiceReference.Schedule Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ServiceTestClient.SessionServiceReference.Schedule)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AllSlotsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AllSlotsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AllBreaksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AllBreaksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AllAssignableSlotsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AllAssignableSlotsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNotAssignedSlotsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNotAssignedSlotsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionServiceClient : System.ServiceModel.ClientBase<ServiceTestClient.SessionServiceReference.ISessionService>, ServiceTestClient.SessionServiceReference.ISessionService {
        
        private BeginOperationDelegate onBeginGetSpeakerListDelegate;
        
        private EndOperationDelegate onEndGetSpeakerListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpeakerListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpeakerByIdDelegate;
        
        private EndOperationDelegate onEndGetSpeakerByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpeakerByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchSpeakerByNameDelegate;
        
        private EndOperationDelegate onEndSearchSpeakerByNameDelegate;
        
        private System.Threading.SendOrPostCallback onSearchSpeakerByNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSpeakerDelegate;
        
        private EndOperationDelegate onEndAddSpeakerDelegate;
        
        private System.Threading.SendOrPostCallback onAddSpeakerCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSpeakerDelegate;
        
        private EndOperationDelegate onEndUpdateSpeakerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSpeakerCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSpeakerDelegate;
        
        private EndOperationDelegate onEndDeleteSpeakerDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSpeakerCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionListDelegate;
        
        private EndOperationDelegate onEndGetSessionListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionByIdDelegate;
        
        private EndOperationDelegate onEndGetSessionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchSessionByTitleDelegate;
        
        private EndOperationDelegate onEndSearchSessionByTitleDelegate;
        
        private System.Threading.SendOrPostCallback onSearchSessionByTitleCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSessionDelegate;
        
        private EndOperationDelegate onEndAddSessionDelegate;
        
        private System.Threading.SendOrPostCallback onAddSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSessionDelegate;
        
        private EndOperationDelegate onEndUpdateSessionDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteSessionDelegate;
        
        private EndOperationDelegate onEndDeleteSessionDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionTypesDelegate;
        
        private EndOperationDelegate onEndGetSessionTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrackListDelegate;
        
        private EndOperationDelegate onEndGetTrackListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrackListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrackByIdDelegate;
        
        private EndOperationDelegate onEndGetTrackByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrackByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchTrackByNameDelegate;
        
        private EndOperationDelegate onEndSearchTrackByNameDelegate;
        
        private System.Threading.SendOrPostCallback onSearchTrackByNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTrackDelegate;
        
        private EndOperationDelegate onEndAddTrackDelegate;
        
        private System.Threading.SendOrPostCallback onAddTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTrackDelegate;
        
        private EndOperationDelegate onEndUpdateTrackDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTrackDelegate;
        
        private EndOperationDelegate onEndDeleteTrackDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchTrackTypeByNameDelegate;
        
        private EndOperationDelegate onEndSearchTrackTypeByNameDelegate;
        
        private System.Threading.SendOrPostCallback onSearchTrackTypeByNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRatingListDelegate;
        
        private EndOperationDelegate onEndGetRatingListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRatingListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRatingByIdDelegate;
        
        private EndOperationDelegate onEndGetRatingByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetRatingByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddRatingDelegate;
        
        private EndOperationDelegate onEndAddRatingDelegate;
        
        private System.Threading.SendOrPostCallback onAddRatingCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateRatingDelegate;
        
        private EndOperationDelegate onEndUpdateRatingDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateRatingCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRatingDelegate;
        
        private EndOperationDelegate onEndDeleteRatingDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRatingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScheduleListDelegate;
        
        private EndOperationDelegate onEndGetScheduleListDelegate;
        
        private System.Threading.SendOrPostCallback onGetScheduleListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScheduleByIdDelegate;
        
        private EndOperationDelegate onEndGetScheduleByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScheduleByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddScheduleDelegate;
        
        private EndOperationDelegate onEndAddScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onAddScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteScheduleDelegate;
        
        private EndOperationDelegate onEndDeleteScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginAllSlotsDelegate;
        
        private EndOperationDelegate onEndAllSlotsDelegate;
        
        private System.Threading.SendOrPostCallback onAllSlotsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAllBreaksDelegate;
        
        private EndOperationDelegate onEndAllBreaksDelegate;
        
        private System.Threading.SendOrPostCallback onAllBreaksCompletedDelegate;
        
        private BeginOperationDelegate onBeginAllAssignableSlotsDelegate;
        
        private EndOperationDelegate onEndAllAssignableSlotsDelegate;
        
        private System.Threading.SendOrPostCallback onAllAssignableSlotsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNotAssignedSlotsDelegate;
        
        private EndOperationDelegate onEndGetNotAssignedSlotsDelegate;
        
        private System.Threading.SendOrPostCallback onGetNotAssignedSlotsCompletedDelegate;
        
        public SessionServiceClient() {
        }
        
        public SessionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetSpeakerListCompletedEventArgs> GetSpeakerListCompleted;
        
        public event System.EventHandler<GetSpeakerByIdCompletedEventArgs> GetSpeakerByIdCompleted;
        
        public event System.EventHandler<SearchSpeakerByNameCompletedEventArgs> SearchSpeakerByNameCompleted;
        
        public event System.EventHandler<AddSpeakerCompletedEventArgs> AddSpeakerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateSpeakerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteSpeakerCompleted;
        
        public event System.EventHandler<GetSessionListCompletedEventArgs> GetSessionListCompleted;
        
        public event System.EventHandler<GetSessionByIdCompletedEventArgs> GetSessionByIdCompleted;
        
        public event System.EventHandler<SearchSessionByTitleCompletedEventArgs> SearchSessionByTitleCompleted;
        
        public event System.EventHandler<AddSessionCompletedEventArgs> AddSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateSessionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteSessionCompleted;
        
        public event System.EventHandler<GetSessionTypesCompletedEventArgs> GetSessionTypesCompleted;
        
        public event System.EventHandler<GetTrackListCompletedEventArgs> GetTrackListCompleted;
        
        public event System.EventHandler<GetTrackByIdCompletedEventArgs> GetTrackByIdCompleted;
        
        public event System.EventHandler<SearchTrackByNameCompletedEventArgs> SearchTrackByNameCompleted;
        
        public event System.EventHandler<AddTrackCompletedEventArgs> AddTrackCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTrackCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTrackCompleted;
        
        public event System.EventHandler<SearchTrackTypeByNameCompletedEventArgs> SearchTrackTypeByNameCompleted;
        
        public event System.EventHandler<GetRatingListCompletedEventArgs> GetRatingListCompleted;
        
        public event System.EventHandler<GetRatingByIdCompletedEventArgs> GetRatingByIdCompleted;
        
        public event System.EventHandler<AddRatingCompletedEventArgs> AddRatingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateRatingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteRatingCompleted;
        
        public event System.EventHandler<GetScheduleListCompletedEventArgs> GetScheduleListCompleted;
        
        public event System.EventHandler<GetScheduleByIdCompletedEventArgs> GetScheduleByIdCompleted;
        
        public event System.EventHandler<AddScheduleCompletedEventArgs> AddScheduleCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteScheduleCompleted;
        
        public event System.EventHandler<AllSlotsCompletedEventArgs> AllSlotsCompleted;
        
        public event System.EventHandler<AllBreaksCompletedEventArgs> AllBreaksCompleted;
        
        public event System.EventHandler<AllAssignableSlotsCompletedEventArgs> AllAssignableSlotsCompleted;
        
        public event System.EventHandler<GetNotAssignedSlotsCompletedEventArgs> GetNotAssignedSlotsCompleted;
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Speaker> GetSpeakerList() {
            return base.Channel.GetSpeakerList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSpeakerList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpeakerList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Speaker> EndGetSpeakerList(System.IAsyncResult result) {
            return base.Channel.EndGetSpeakerList(result);
        }
        
        private System.IAsyncResult OnBeginGetSpeakerList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSpeakerList(callback, asyncState);
        }
        
        private object[] OnEndGetSpeakerList(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Speaker> retVal = this.EndGetSpeakerList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpeakerListCompleted(object state) {
            if ((this.GetSpeakerListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpeakerListCompleted(this, new GetSpeakerListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpeakerListAsync() {
            this.GetSpeakerListAsync(null);
        }
        
        public void GetSpeakerListAsync(object userState) {
            if ((this.onBeginGetSpeakerListDelegate == null)) {
                this.onBeginGetSpeakerListDelegate = new BeginOperationDelegate(this.OnBeginGetSpeakerList);
            }
            if ((this.onEndGetSpeakerListDelegate == null)) {
                this.onEndGetSpeakerListDelegate = new EndOperationDelegate(this.OnEndGetSpeakerList);
            }
            if ((this.onGetSpeakerListCompletedDelegate == null)) {
                this.onGetSpeakerListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpeakerListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpeakerListDelegate, null, this.onEndGetSpeakerListDelegate, this.onGetSpeakerListCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Speaker GetSpeakerById(int id) {
            return base.Channel.GetSpeakerById(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSpeakerById(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpeakerById(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Speaker EndGetSpeakerById(System.IAsyncResult result) {
            return base.Channel.EndGetSpeakerById(result);
        }
        
        private System.IAsyncResult OnBeginGetSpeakerById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetSpeakerById(id, callback, asyncState);
        }
        
        private object[] OnEndGetSpeakerById(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Speaker retVal = this.EndGetSpeakerById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpeakerByIdCompleted(object state) {
            if ((this.GetSpeakerByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpeakerByIdCompleted(this, new GetSpeakerByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpeakerByIdAsync(int id) {
            this.GetSpeakerByIdAsync(id, null);
        }
        
        public void GetSpeakerByIdAsync(int id, object userState) {
            if ((this.onBeginGetSpeakerByIdDelegate == null)) {
                this.onBeginGetSpeakerByIdDelegate = new BeginOperationDelegate(this.OnBeginGetSpeakerById);
            }
            if ((this.onEndGetSpeakerByIdDelegate == null)) {
                this.onEndGetSpeakerByIdDelegate = new EndOperationDelegate(this.OnEndGetSpeakerById);
            }
            if ((this.onGetSpeakerByIdCompletedDelegate == null)) {
                this.onGetSpeakerByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpeakerByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpeakerByIdDelegate, new object[] {
                        id}, this.onEndGetSpeakerByIdDelegate, this.onGetSpeakerByIdCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Speaker SearchSpeakerByName(string name) {
            return base.Channel.SearchSpeakerByName(name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchSpeakerByName(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchSpeakerByName(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Speaker EndSearchSpeakerByName(System.IAsyncResult result) {
            return base.Channel.EndSearchSpeakerByName(result);
        }
        
        private System.IAsyncResult OnBeginSearchSpeakerByName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return this.BeginSearchSpeakerByName(name, callback, asyncState);
        }
        
        private object[] OnEndSearchSpeakerByName(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Speaker retVal = this.EndSearchSpeakerByName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchSpeakerByNameCompleted(object state) {
            if ((this.SearchSpeakerByNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchSpeakerByNameCompleted(this, new SearchSpeakerByNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchSpeakerByNameAsync(string name) {
            this.SearchSpeakerByNameAsync(name, null);
        }
        
        public void SearchSpeakerByNameAsync(string name, object userState) {
            if ((this.onBeginSearchSpeakerByNameDelegate == null)) {
                this.onBeginSearchSpeakerByNameDelegate = new BeginOperationDelegate(this.OnBeginSearchSpeakerByName);
            }
            if ((this.onEndSearchSpeakerByNameDelegate == null)) {
                this.onEndSearchSpeakerByNameDelegate = new EndOperationDelegate(this.OnEndSearchSpeakerByName);
            }
            if ((this.onSearchSpeakerByNameCompletedDelegate == null)) {
                this.onSearchSpeakerByNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchSpeakerByNameCompleted);
            }
            base.InvokeAsync(this.onBeginSearchSpeakerByNameDelegate, new object[] {
                        name}, this.onEndSearchSpeakerByNameDelegate, this.onSearchSpeakerByNameCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Speaker AddSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker) {
            return base.Channel.AddSpeaker(speaker);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSpeaker(speaker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Speaker EndAddSpeaker(System.IAsyncResult result) {
            return base.Channel.EndAddSpeaker(result);
        }
        
        private System.IAsyncResult OnBeginAddSpeaker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.Speaker speaker = ((ServiceTestClient.SessionServiceReference.Speaker)(inValues[0]));
            return this.BeginAddSpeaker(speaker, callback, asyncState);
        }
        
        private object[] OnEndAddSpeaker(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Speaker retVal = this.EndAddSpeaker(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSpeakerCompleted(object state) {
            if ((this.AddSpeakerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSpeakerCompleted(this, new AddSpeakerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSpeakerAsync(ServiceTestClient.SessionServiceReference.Speaker speaker) {
            this.AddSpeakerAsync(speaker, null);
        }
        
        public void AddSpeakerAsync(ServiceTestClient.SessionServiceReference.Speaker speaker, object userState) {
            if ((this.onBeginAddSpeakerDelegate == null)) {
                this.onBeginAddSpeakerDelegate = new BeginOperationDelegate(this.OnBeginAddSpeaker);
            }
            if ((this.onEndAddSpeakerDelegate == null)) {
                this.onEndAddSpeakerDelegate = new EndOperationDelegate(this.OnEndAddSpeaker);
            }
            if ((this.onAddSpeakerCompletedDelegate == null)) {
                this.onAddSpeakerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSpeakerCompleted);
            }
            base.InvokeAsync(this.onBeginAddSpeakerDelegate, new object[] {
                        speaker}, this.onEndAddSpeakerDelegate, this.onAddSpeakerCompletedDelegate, userState);
        }
        
        public void UpdateSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker) {
            base.Channel.UpdateSpeaker(speaker);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateSpeaker(ServiceTestClient.SessionServiceReference.Speaker speaker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSpeaker(speaker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateSpeaker(System.IAsyncResult result) {
            base.Channel.EndUpdateSpeaker(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSpeaker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.Speaker speaker = ((ServiceTestClient.SessionServiceReference.Speaker)(inValues[0]));
            return this.BeginUpdateSpeaker(speaker, callback, asyncState);
        }
        
        private object[] OnEndUpdateSpeaker(System.IAsyncResult result) {
            this.EndUpdateSpeaker(result);
            return null;
        }
        
        private void OnUpdateSpeakerCompleted(object state) {
            if ((this.UpdateSpeakerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSpeakerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSpeakerAsync(ServiceTestClient.SessionServiceReference.Speaker speaker) {
            this.UpdateSpeakerAsync(speaker, null);
        }
        
        public void UpdateSpeakerAsync(ServiceTestClient.SessionServiceReference.Speaker speaker, object userState) {
            if ((this.onBeginUpdateSpeakerDelegate == null)) {
                this.onBeginUpdateSpeakerDelegate = new BeginOperationDelegate(this.OnBeginUpdateSpeaker);
            }
            if ((this.onEndUpdateSpeakerDelegate == null)) {
                this.onEndUpdateSpeakerDelegate = new EndOperationDelegate(this.OnEndUpdateSpeaker);
            }
            if ((this.onUpdateSpeakerCompletedDelegate == null)) {
                this.onUpdateSpeakerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSpeakerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSpeakerDelegate, new object[] {
                        speaker}, this.onEndUpdateSpeakerDelegate, this.onUpdateSpeakerCompletedDelegate, userState);
        }
        
        public void DeleteSpeaker(int id) {
            base.Channel.DeleteSpeaker(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteSpeaker(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSpeaker(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteSpeaker(System.IAsyncResult result) {
            base.Channel.EndDeleteSpeaker(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSpeaker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteSpeaker(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteSpeaker(System.IAsyncResult result) {
            this.EndDeleteSpeaker(result);
            return null;
        }
        
        private void OnDeleteSpeakerCompleted(object state) {
            if ((this.DeleteSpeakerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSpeakerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSpeakerAsync(int id) {
            this.DeleteSpeakerAsync(id, null);
        }
        
        public void DeleteSpeakerAsync(int id, object userState) {
            if ((this.onBeginDeleteSpeakerDelegate == null)) {
                this.onBeginDeleteSpeakerDelegate = new BeginOperationDelegate(this.OnBeginDeleteSpeaker);
            }
            if ((this.onEndDeleteSpeakerDelegate == null)) {
                this.onEndDeleteSpeakerDelegate = new EndOperationDelegate(this.OnEndDeleteSpeaker);
            }
            if ((this.onDeleteSpeakerCompletedDelegate == null)) {
                this.onDeleteSpeakerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSpeakerCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSpeakerDelegate, new object[] {
                        id}, this.onEndDeleteSpeakerDelegate, this.onDeleteSpeakerCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.SessionDto> GetSessionList() {
            return base.Channel.GetSessionList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSessionList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSessionList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.SessionDto> EndGetSessionList(System.IAsyncResult result) {
            return base.Channel.EndGetSessionList(result);
        }
        
        private System.IAsyncResult OnBeginGetSessionList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSessionList(callback, asyncState);
        }
        
        private object[] OnEndGetSessionList(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.SessionDto> retVal = this.EndGetSessionList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionListCompleted(object state) {
            if ((this.GetSessionListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionListCompleted(this, new GetSessionListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionListAsync() {
            this.GetSessionListAsync(null);
        }
        
        public void GetSessionListAsync(object userState) {
            if ((this.onBeginGetSessionListDelegate == null)) {
                this.onBeginGetSessionListDelegate = new BeginOperationDelegate(this.OnBeginGetSessionList);
            }
            if ((this.onEndGetSessionListDelegate == null)) {
                this.onEndGetSessionListDelegate = new EndOperationDelegate(this.OnEndGetSessionList);
            }
            if ((this.onGetSessionListCompletedDelegate == null)) {
                this.onGetSessionListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionListDelegate, null, this.onEndGetSessionListDelegate, this.onGetSessionListCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.SessionDto GetSessionById(int id) {
            return base.Channel.GetSessionById(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSessionById(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSessionById(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.SessionDto EndGetSessionById(System.IAsyncResult result) {
            return base.Channel.EndGetSessionById(result);
        }
        
        private System.IAsyncResult OnBeginGetSessionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetSessionById(id, callback, asyncState);
        }
        
        private object[] OnEndGetSessionById(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.SessionDto retVal = this.EndGetSessionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionByIdCompleted(object state) {
            if ((this.GetSessionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionByIdCompleted(this, new GetSessionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionByIdAsync(int id) {
            this.GetSessionByIdAsync(id, null);
        }
        
        public void GetSessionByIdAsync(int id, object userState) {
            if ((this.onBeginGetSessionByIdDelegate == null)) {
                this.onBeginGetSessionByIdDelegate = new BeginOperationDelegate(this.OnBeginGetSessionById);
            }
            if ((this.onEndGetSessionByIdDelegate == null)) {
                this.onEndGetSessionByIdDelegate = new EndOperationDelegate(this.OnEndGetSessionById);
            }
            if ((this.onGetSessionByIdCompletedDelegate == null)) {
                this.onGetSessionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionByIdDelegate, new object[] {
                        id}, this.onEndGetSessionByIdDelegate, this.onGetSessionByIdCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.SessionDto SearchSessionByTitle(string title) {
            return base.Channel.SearchSessionByTitle(title);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchSessionByTitle(string title, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchSessionByTitle(title, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.SessionDto EndSearchSessionByTitle(System.IAsyncResult result) {
            return base.Channel.EndSearchSessionByTitle(result);
        }
        
        private System.IAsyncResult OnBeginSearchSessionByTitle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string title = ((string)(inValues[0]));
            return this.BeginSearchSessionByTitle(title, callback, asyncState);
        }
        
        private object[] OnEndSearchSessionByTitle(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.SessionDto retVal = this.EndSearchSessionByTitle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchSessionByTitleCompleted(object state) {
            if ((this.SearchSessionByTitleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchSessionByTitleCompleted(this, new SearchSessionByTitleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchSessionByTitleAsync(string title) {
            this.SearchSessionByTitleAsync(title, null);
        }
        
        public void SearchSessionByTitleAsync(string title, object userState) {
            if ((this.onBeginSearchSessionByTitleDelegate == null)) {
                this.onBeginSearchSessionByTitleDelegate = new BeginOperationDelegate(this.OnBeginSearchSessionByTitle);
            }
            if ((this.onEndSearchSessionByTitleDelegate == null)) {
                this.onEndSearchSessionByTitleDelegate = new EndOperationDelegate(this.OnEndSearchSessionByTitle);
            }
            if ((this.onSearchSessionByTitleCompletedDelegate == null)) {
                this.onSearchSessionByTitleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchSessionByTitleCompleted);
            }
            base.InvokeAsync(this.onBeginSearchSessionByTitleDelegate, new object[] {
                        title}, this.onEndSearchSessionByTitleDelegate, this.onSearchSessionByTitleCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.SessionDto AddSession(ServiceTestClient.SessionServiceReference.SessionDto session) {
            return base.Channel.AddSession(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSession(ServiceTestClient.SessionServiceReference.SessionDto session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSession(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.SessionDto EndAddSession(System.IAsyncResult result) {
            return base.Channel.EndAddSession(result);
        }
        
        private System.IAsyncResult OnBeginAddSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.SessionDto session = ((ServiceTestClient.SessionServiceReference.SessionDto)(inValues[0]));
            return this.BeginAddSession(session, callback, asyncState);
        }
        
        private object[] OnEndAddSession(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.SessionDto retVal = this.EndAddSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddSessionCompleted(object state) {
            if ((this.AddSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSessionCompleted(this, new AddSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSessionAsync(ServiceTestClient.SessionServiceReference.SessionDto session) {
            this.AddSessionAsync(session, null);
        }
        
        public void AddSessionAsync(ServiceTestClient.SessionServiceReference.SessionDto session, object userState) {
            if ((this.onBeginAddSessionDelegate == null)) {
                this.onBeginAddSessionDelegate = new BeginOperationDelegate(this.OnBeginAddSession);
            }
            if ((this.onEndAddSessionDelegate == null)) {
                this.onEndAddSessionDelegate = new EndOperationDelegate(this.OnEndAddSession);
            }
            if ((this.onAddSessionCompletedDelegate == null)) {
                this.onAddSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSessionCompleted);
            }
            base.InvokeAsync(this.onBeginAddSessionDelegate, new object[] {
                        session}, this.onEndAddSessionDelegate, this.onAddSessionCompletedDelegate, userState);
        }
        
        public void UpdateSession(ServiceTestClient.SessionServiceReference.SessionDto session) {
            base.Channel.UpdateSession(session);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateSession(ServiceTestClient.SessionServiceReference.SessionDto session, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSession(session, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateSession(System.IAsyncResult result) {
            base.Channel.EndUpdateSession(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.SessionDto session = ((ServiceTestClient.SessionServiceReference.SessionDto)(inValues[0]));
            return this.BeginUpdateSession(session, callback, asyncState);
        }
        
        private object[] OnEndUpdateSession(System.IAsyncResult result) {
            this.EndUpdateSession(result);
            return null;
        }
        
        private void OnUpdateSessionCompleted(object state) {
            if ((this.UpdateSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSessionAsync(ServiceTestClient.SessionServiceReference.SessionDto session) {
            this.UpdateSessionAsync(session, null);
        }
        
        public void UpdateSessionAsync(ServiceTestClient.SessionServiceReference.SessionDto session, object userState) {
            if ((this.onBeginUpdateSessionDelegate == null)) {
                this.onBeginUpdateSessionDelegate = new BeginOperationDelegate(this.OnBeginUpdateSession);
            }
            if ((this.onEndUpdateSessionDelegate == null)) {
                this.onEndUpdateSessionDelegate = new EndOperationDelegate(this.OnEndUpdateSession);
            }
            if ((this.onUpdateSessionCompletedDelegate == null)) {
                this.onUpdateSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSessionCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSessionDelegate, new object[] {
                        session}, this.onEndUpdateSessionDelegate, this.onUpdateSessionCompletedDelegate, userState);
        }
        
        public void DeleteSession(int id) {
            base.Channel.DeleteSession(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteSession(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSession(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteSession(System.IAsyncResult result) {
            base.Channel.EndDeleteSession(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteSession(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteSession(System.IAsyncResult result) {
            this.EndDeleteSession(result);
            return null;
        }
        
        private void OnDeleteSessionCompleted(object state) {
            if ((this.DeleteSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteSessionAsync(int id) {
            this.DeleteSessionAsync(id, null);
        }
        
        public void DeleteSessionAsync(int id, object userState) {
            if ((this.onBeginDeleteSessionDelegate == null)) {
                this.onBeginDeleteSessionDelegate = new BeginOperationDelegate(this.OnBeginDeleteSession);
            }
            if ((this.onEndDeleteSessionDelegate == null)) {
                this.onEndDeleteSessionDelegate = new EndOperationDelegate(this.OnEndDeleteSession);
            }
            if ((this.onDeleteSessionCompletedDelegate == null)) {
                this.onDeleteSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteSessionCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteSessionDelegate, new object[] {
                        id}, this.onEndDeleteSessionDelegate, this.onDeleteSessionCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetSessionTypes() {
            return base.Channel.GetSessionTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSessionTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSessionTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetSessionTypes(System.IAsyncResult result) {
            return base.Channel.EndGetSessionTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetSessionTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetSessionTypes(callback, asyncState);
        }
        
        private object[] OnEndGetSessionTypes(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetSessionTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionTypesCompleted(object state) {
            if ((this.GetSessionTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionTypesCompleted(this, new GetSessionTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionTypesAsync() {
            this.GetSessionTypesAsync(null);
        }
        
        public void GetSessionTypesAsync(object userState) {
            if ((this.onBeginGetSessionTypesDelegate == null)) {
                this.onBeginGetSessionTypesDelegate = new BeginOperationDelegate(this.OnBeginGetSessionTypes);
            }
            if ((this.onEndGetSessionTypesDelegate == null)) {
                this.onEndGetSessionTypesDelegate = new EndOperationDelegate(this.OnEndGetSessionTypes);
            }
            if ((this.onGetSessionTypesCompletedDelegate == null)) {
                this.onGetSessionTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionTypesDelegate, null, this.onEndGetSessionTypesDelegate, this.onGetSessionTypesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> GetTrackList() {
            return base.Channel.GetTrackList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrackList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrackList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> EndGetTrackList(System.IAsyncResult result) {
            return base.Channel.EndGetTrackList(result);
        }
        
        private System.IAsyncResult OnBeginGetTrackList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTrackList(callback, asyncState);
        }
        
        private object[] OnEndGetTrackList(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Track> retVal = this.EndGetTrackList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrackListCompleted(object state) {
            if ((this.GetTrackListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrackListCompleted(this, new GetTrackListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrackListAsync() {
            this.GetTrackListAsync(null);
        }
        
        public void GetTrackListAsync(object userState) {
            if ((this.onBeginGetTrackListDelegate == null)) {
                this.onBeginGetTrackListDelegate = new BeginOperationDelegate(this.OnBeginGetTrackList);
            }
            if ((this.onEndGetTrackListDelegate == null)) {
                this.onEndGetTrackListDelegate = new EndOperationDelegate(this.OnEndGetTrackList);
            }
            if ((this.onGetTrackListCompletedDelegate == null)) {
                this.onGetTrackListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrackListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrackListDelegate, null, this.onEndGetTrackListDelegate, this.onGetTrackListCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Track GetTrackById(int id) {
            return base.Channel.GetTrackById(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTrackById(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrackById(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Track EndGetTrackById(System.IAsyncResult result) {
            return base.Channel.EndGetTrackById(result);
        }
        
        private System.IAsyncResult OnBeginGetTrackById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetTrackById(id, callback, asyncState);
        }
        
        private object[] OnEndGetTrackById(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Track retVal = this.EndGetTrackById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrackByIdCompleted(object state) {
            if ((this.GetTrackByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrackByIdCompleted(this, new GetTrackByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrackByIdAsync(int id) {
            this.GetTrackByIdAsync(id, null);
        }
        
        public void GetTrackByIdAsync(int id, object userState) {
            if ((this.onBeginGetTrackByIdDelegate == null)) {
                this.onBeginGetTrackByIdDelegate = new BeginOperationDelegate(this.OnBeginGetTrackById);
            }
            if ((this.onEndGetTrackByIdDelegate == null)) {
                this.onEndGetTrackByIdDelegate = new EndOperationDelegate(this.OnEndGetTrackById);
            }
            if ((this.onGetTrackByIdCompletedDelegate == null)) {
                this.onGetTrackByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrackByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrackByIdDelegate, new object[] {
                        id}, this.onEndGetTrackByIdDelegate, this.onGetTrackByIdCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Track SearchTrackByName(string track) {
            return base.Channel.SearchTrackByName(track);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchTrackByName(string track, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchTrackByName(track, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Track EndSearchTrackByName(System.IAsyncResult result) {
            return base.Channel.EndSearchTrackByName(result);
        }
        
        private System.IAsyncResult OnBeginSearchTrackByName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string track = ((string)(inValues[0]));
            return this.BeginSearchTrackByName(track, callback, asyncState);
        }
        
        private object[] OnEndSearchTrackByName(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Track retVal = this.EndSearchTrackByName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchTrackByNameCompleted(object state) {
            if ((this.SearchTrackByNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchTrackByNameCompleted(this, new SearchTrackByNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchTrackByNameAsync(string track) {
            this.SearchTrackByNameAsync(track, null);
        }
        
        public void SearchTrackByNameAsync(string track, object userState) {
            if ((this.onBeginSearchTrackByNameDelegate == null)) {
                this.onBeginSearchTrackByNameDelegate = new BeginOperationDelegate(this.OnBeginSearchTrackByName);
            }
            if ((this.onEndSearchTrackByNameDelegate == null)) {
                this.onEndSearchTrackByNameDelegate = new EndOperationDelegate(this.OnEndSearchTrackByName);
            }
            if ((this.onSearchTrackByNameCompletedDelegate == null)) {
                this.onSearchTrackByNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchTrackByNameCompleted);
            }
            base.InvokeAsync(this.onBeginSearchTrackByNameDelegate, new object[] {
                        track}, this.onEndSearchTrackByNameDelegate, this.onSearchTrackByNameCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Track AddTrack(ServiceTestClient.SessionServiceReference.Track track) {
            return base.Channel.AddTrack(track);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTrack(ServiceTestClient.SessionServiceReference.Track track, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTrack(track, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Track EndAddTrack(System.IAsyncResult result) {
            return base.Channel.EndAddTrack(result);
        }
        
        private System.IAsyncResult OnBeginAddTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.Track track = ((ServiceTestClient.SessionServiceReference.Track)(inValues[0]));
            return this.BeginAddTrack(track, callback, asyncState);
        }
        
        private object[] OnEndAddTrack(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Track retVal = this.EndAddTrack(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTrackCompleted(object state) {
            if ((this.AddTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTrackCompleted(this, new AddTrackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTrackAsync(ServiceTestClient.SessionServiceReference.Track track) {
            this.AddTrackAsync(track, null);
        }
        
        public void AddTrackAsync(ServiceTestClient.SessionServiceReference.Track track, object userState) {
            if ((this.onBeginAddTrackDelegate == null)) {
                this.onBeginAddTrackDelegate = new BeginOperationDelegate(this.OnBeginAddTrack);
            }
            if ((this.onEndAddTrackDelegate == null)) {
                this.onEndAddTrackDelegate = new EndOperationDelegate(this.OnEndAddTrack);
            }
            if ((this.onAddTrackCompletedDelegate == null)) {
                this.onAddTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTrackCompleted);
            }
            base.InvokeAsync(this.onBeginAddTrackDelegate, new object[] {
                        track}, this.onEndAddTrackDelegate, this.onAddTrackCompletedDelegate, userState);
        }
        
        public void UpdateTrack(ServiceTestClient.SessionServiceReference.Track track) {
            base.Channel.UpdateTrack(track);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTrack(ServiceTestClient.SessionServiceReference.Track track, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTrack(track, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTrack(System.IAsyncResult result) {
            base.Channel.EndUpdateTrack(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.Track track = ((ServiceTestClient.SessionServiceReference.Track)(inValues[0]));
            return this.BeginUpdateTrack(track, callback, asyncState);
        }
        
        private object[] OnEndUpdateTrack(System.IAsyncResult result) {
            this.EndUpdateTrack(result);
            return null;
        }
        
        private void OnUpdateTrackCompleted(object state) {
            if ((this.UpdateTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTrackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTrackAsync(ServiceTestClient.SessionServiceReference.Track track) {
            this.UpdateTrackAsync(track, null);
        }
        
        public void UpdateTrackAsync(ServiceTestClient.SessionServiceReference.Track track, object userState) {
            if ((this.onBeginUpdateTrackDelegate == null)) {
                this.onBeginUpdateTrackDelegate = new BeginOperationDelegate(this.OnBeginUpdateTrack);
            }
            if ((this.onEndUpdateTrackDelegate == null)) {
                this.onEndUpdateTrackDelegate = new EndOperationDelegate(this.OnEndUpdateTrack);
            }
            if ((this.onUpdateTrackCompletedDelegate == null)) {
                this.onUpdateTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTrackCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTrackDelegate, new object[] {
                        track}, this.onEndUpdateTrackDelegate, this.onUpdateTrackCompletedDelegate, userState);
        }
        
        public void DeleteTrack(int id) {
            base.Channel.DeleteTrack(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteTrack(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTrack(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteTrack(System.IAsyncResult result) {
            base.Channel.EndDeleteTrack(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteTrack(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteTrack(System.IAsyncResult result) {
            this.EndDeleteTrack(result);
            return null;
        }
        
        private void OnDeleteTrackCompleted(object state) {
            if ((this.DeleteTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTrackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTrackAsync(int id) {
            this.DeleteTrackAsync(id, null);
        }
        
        public void DeleteTrackAsync(int id, object userState) {
            if ((this.onBeginDeleteTrackDelegate == null)) {
                this.onBeginDeleteTrackDelegate = new BeginOperationDelegate(this.OnBeginDeleteTrack);
            }
            if ((this.onEndDeleteTrackDelegate == null)) {
                this.onEndDeleteTrackDelegate = new EndOperationDelegate(this.OnEndDeleteTrack);
            }
            if ((this.onDeleteTrackCompletedDelegate == null)) {
                this.onDeleteTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTrackCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTrackDelegate, new object[] {
                        id}, this.onEndDeleteTrackDelegate, this.onDeleteTrackCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Track SearchTrackTypeByName(string track) {
            return base.Channel.SearchTrackTypeByName(track);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchTrackTypeByName(string track, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchTrackTypeByName(track, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Track EndSearchTrackTypeByName(System.IAsyncResult result) {
            return base.Channel.EndSearchTrackTypeByName(result);
        }
        
        private System.IAsyncResult OnBeginSearchTrackTypeByName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string track = ((string)(inValues[0]));
            return this.BeginSearchTrackTypeByName(track, callback, asyncState);
        }
        
        private object[] OnEndSearchTrackTypeByName(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Track retVal = this.EndSearchTrackTypeByName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchTrackTypeByNameCompleted(object state) {
            if ((this.SearchTrackTypeByNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchTrackTypeByNameCompleted(this, new SearchTrackTypeByNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchTrackTypeByNameAsync(string track) {
            this.SearchTrackTypeByNameAsync(track, null);
        }
        
        public void SearchTrackTypeByNameAsync(string track, object userState) {
            if ((this.onBeginSearchTrackTypeByNameDelegate == null)) {
                this.onBeginSearchTrackTypeByNameDelegate = new BeginOperationDelegate(this.OnBeginSearchTrackTypeByName);
            }
            if ((this.onEndSearchTrackTypeByNameDelegate == null)) {
                this.onEndSearchTrackTypeByNameDelegate = new EndOperationDelegate(this.OnEndSearchTrackTypeByName);
            }
            if ((this.onSearchTrackTypeByNameCompletedDelegate == null)) {
                this.onSearchTrackTypeByNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchTrackTypeByNameCompleted);
            }
            base.InvokeAsync(this.onBeginSearchTrackTypeByNameDelegate, new object[] {
                        track}, this.onEndSearchTrackTypeByNameDelegate, this.onSearchTrackTypeByNameCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Rating> GetRatingList() {
            return base.Channel.GetRatingList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRatingList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRatingList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Rating> EndGetRatingList(System.IAsyncResult result) {
            return base.Channel.EndGetRatingList(result);
        }
        
        private System.IAsyncResult OnBeginGetRatingList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRatingList(callback, asyncState);
        }
        
        private object[] OnEndGetRatingList(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Rating> retVal = this.EndGetRatingList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRatingListCompleted(object state) {
            if ((this.GetRatingListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRatingListCompleted(this, new GetRatingListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRatingListAsync() {
            this.GetRatingListAsync(null);
        }
        
        public void GetRatingListAsync(object userState) {
            if ((this.onBeginGetRatingListDelegate == null)) {
                this.onBeginGetRatingListDelegate = new BeginOperationDelegate(this.OnBeginGetRatingList);
            }
            if ((this.onEndGetRatingListDelegate == null)) {
                this.onEndGetRatingListDelegate = new EndOperationDelegate(this.OnEndGetRatingList);
            }
            if ((this.onGetRatingListCompletedDelegate == null)) {
                this.onGetRatingListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRatingListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRatingListDelegate, null, this.onEndGetRatingListDelegate, this.onGetRatingListCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Rating GetRatingById(int id) {
            return base.Channel.GetRatingById(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRatingById(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRatingById(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Rating EndGetRatingById(System.IAsyncResult result) {
            return base.Channel.EndGetRatingById(result);
        }
        
        private System.IAsyncResult OnBeginGetRatingById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetRatingById(id, callback, asyncState);
        }
        
        private object[] OnEndGetRatingById(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Rating retVal = this.EndGetRatingById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRatingByIdCompleted(object state) {
            if ((this.GetRatingByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRatingByIdCompleted(this, new GetRatingByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRatingByIdAsync(int id) {
            this.GetRatingByIdAsync(id, null);
        }
        
        public void GetRatingByIdAsync(int id, object userState) {
            if ((this.onBeginGetRatingByIdDelegate == null)) {
                this.onBeginGetRatingByIdDelegate = new BeginOperationDelegate(this.OnBeginGetRatingById);
            }
            if ((this.onEndGetRatingByIdDelegate == null)) {
                this.onEndGetRatingByIdDelegate = new EndOperationDelegate(this.OnEndGetRatingById);
            }
            if ((this.onGetRatingByIdCompletedDelegate == null)) {
                this.onGetRatingByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRatingByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetRatingByIdDelegate, new object[] {
                        id}, this.onEndGetRatingByIdDelegate, this.onGetRatingByIdCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Rating AddRating(ServiceTestClient.SessionServiceReference.Rating rating) {
            return base.Channel.AddRating(rating);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddRating(ServiceTestClient.SessionServiceReference.Rating rating, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddRating(rating, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Rating EndAddRating(System.IAsyncResult result) {
            return base.Channel.EndAddRating(result);
        }
        
        private System.IAsyncResult OnBeginAddRating(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.Rating rating = ((ServiceTestClient.SessionServiceReference.Rating)(inValues[0]));
            return this.BeginAddRating(rating, callback, asyncState);
        }
        
        private object[] OnEndAddRating(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Rating retVal = this.EndAddRating(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddRatingCompleted(object state) {
            if ((this.AddRatingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddRatingCompleted(this, new AddRatingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddRatingAsync(ServiceTestClient.SessionServiceReference.Rating rating) {
            this.AddRatingAsync(rating, null);
        }
        
        public void AddRatingAsync(ServiceTestClient.SessionServiceReference.Rating rating, object userState) {
            if ((this.onBeginAddRatingDelegate == null)) {
                this.onBeginAddRatingDelegate = new BeginOperationDelegate(this.OnBeginAddRating);
            }
            if ((this.onEndAddRatingDelegate == null)) {
                this.onEndAddRatingDelegate = new EndOperationDelegate(this.OnEndAddRating);
            }
            if ((this.onAddRatingCompletedDelegate == null)) {
                this.onAddRatingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddRatingCompleted);
            }
            base.InvokeAsync(this.onBeginAddRatingDelegate, new object[] {
                        rating}, this.onEndAddRatingDelegate, this.onAddRatingCompletedDelegate, userState);
        }
        
        public void UpdateRating(ServiceTestClient.SessionServiceReference.Rating rating) {
            base.Channel.UpdateRating(rating);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateRating(ServiceTestClient.SessionServiceReference.Rating rating, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateRating(rating, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateRating(System.IAsyncResult result) {
            base.Channel.EndUpdateRating(result);
        }
        
        private System.IAsyncResult OnBeginUpdateRating(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ServiceTestClient.SessionServiceReference.Rating rating = ((ServiceTestClient.SessionServiceReference.Rating)(inValues[0]));
            return this.BeginUpdateRating(rating, callback, asyncState);
        }
        
        private object[] OnEndUpdateRating(System.IAsyncResult result) {
            this.EndUpdateRating(result);
            return null;
        }
        
        private void OnUpdateRatingCompleted(object state) {
            if ((this.UpdateRatingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateRatingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateRatingAsync(ServiceTestClient.SessionServiceReference.Rating rating) {
            this.UpdateRatingAsync(rating, null);
        }
        
        public void UpdateRatingAsync(ServiceTestClient.SessionServiceReference.Rating rating, object userState) {
            if ((this.onBeginUpdateRatingDelegate == null)) {
                this.onBeginUpdateRatingDelegate = new BeginOperationDelegate(this.OnBeginUpdateRating);
            }
            if ((this.onEndUpdateRatingDelegate == null)) {
                this.onEndUpdateRatingDelegate = new EndOperationDelegate(this.OnEndUpdateRating);
            }
            if ((this.onUpdateRatingCompletedDelegate == null)) {
                this.onUpdateRatingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateRatingCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateRatingDelegate, new object[] {
                        rating}, this.onEndUpdateRatingDelegate, this.onUpdateRatingCompletedDelegate, userState);
        }
        
        public void DeleteRating(int id) {
            base.Channel.DeleteRating(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteRating(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRating(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteRating(System.IAsyncResult result) {
            base.Channel.EndDeleteRating(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRating(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteRating(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteRating(System.IAsyncResult result) {
            this.EndDeleteRating(result);
            return null;
        }
        
        private void OnDeleteRatingCompleted(object state) {
            if ((this.DeleteRatingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRatingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRatingAsync(int id) {
            this.DeleteRatingAsync(id, null);
        }
        
        public void DeleteRatingAsync(int id, object userState) {
            if ((this.onBeginDeleteRatingDelegate == null)) {
                this.onBeginDeleteRatingDelegate = new BeginOperationDelegate(this.OnBeginDeleteRating);
            }
            if ((this.onEndDeleteRatingDelegate == null)) {
                this.onEndDeleteRatingDelegate = new EndOperationDelegate(this.OnEndDeleteRating);
            }
            if ((this.onDeleteRatingCompletedDelegate == null)) {
                this.onDeleteRatingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRatingCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRatingDelegate, new object[] {
                        id}, this.onEndDeleteRatingDelegate, this.onDeleteRatingCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Schedule> GetScheduleList() {
            return base.Channel.GetScheduleList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScheduleList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScheduleList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Schedule> EndGetScheduleList(System.IAsyncResult result) {
            return base.Channel.EndGetScheduleList(result);
        }
        
        private System.IAsyncResult OnBeginGetScheduleList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetScheduleList(callback, asyncState);
        }
        
        private object[] OnEndGetScheduleList(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Schedule> retVal = this.EndGetScheduleList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScheduleListCompleted(object state) {
            if ((this.GetScheduleListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScheduleListCompleted(this, new GetScheduleListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScheduleListAsync() {
            this.GetScheduleListAsync(null);
        }
        
        public void GetScheduleListAsync(object userState) {
            if ((this.onBeginGetScheduleListDelegate == null)) {
                this.onBeginGetScheduleListDelegate = new BeginOperationDelegate(this.OnBeginGetScheduleList);
            }
            if ((this.onEndGetScheduleListDelegate == null)) {
                this.onEndGetScheduleListDelegate = new EndOperationDelegate(this.OnEndGetScheduleList);
            }
            if ((this.onGetScheduleListCompletedDelegate == null)) {
                this.onGetScheduleListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScheduleListCompleted);
            }
            base.InvokeAsync(this.onBeginGetScheduleListDelegate, null, this.onEndGetScheduleListDelegate, this.onGetScheduleListCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Schedule GetScheduleById(int id) {
            return base.Channel.GetScheduleById(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScheduleById(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScheduleById(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Schedule EndGetScheduleById(System.IAsyncResult result) {
            return base.Channel.EndGetScheduleById(result);
        }
        
        private System.IAsyncResult OnBeginGetScheduleById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginGetScheduleById(id, callback, asyncState);
        }
        
        private object[] OnEndGetScheduleById(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Schedule retVal = this.EndGetScheduleById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScheduleByIdCompleted(object state) {
            if ((this.GetScheduleByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScheduleByIdCompleted(this, new GetScheduleByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScheduleByIdAsync(int id) {
            this.GetScheduleByIdAsync(id, null);
        }
        
        public void GetScheduleByIdAsync(int id, object userState) {
            if ((this.onBeginGetScheduleByIdDelegate == null)) {
                this.onBeginGetScheduleByIdDelegate = new BeginOperationDelegate(this.OnBeginGetScheduleById);
            }
            if ((this.onEndGetScheduleByIdDelegate == null)) {
                this.onEndGetScheduleByIdDelegate = new EndOperationDelegate(this.OnEndGetScheduleById);
            }
            if ((this.onGetScheduleByIdCompletedDelegate == null)) {
                this.onGetScheduleByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScheduleByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScheduleByIdDelegate, new object[] {
                        id}, this.onEndGetScheduleByIdDelegate, this.onGetScheduleByIdCompletedDelegate, userState);
        }
        
        public ServiceTestClient.SessionServiceReference.Schedule AddSchedule(int id, ServiceTestClient.SessionServiceReference.Schedule schedule) {
            return base.Channel.AddSchedule(id, schedule);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSchedule(int id, ServiceTestClient.SessionServiceReference.Schedule schedule, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSchedule(id, schedule, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ServiceTestClient.SessionServiceReference.Schedule EndAddSchedule(System.IAsyncResult result) {
            return base.Channel.EndAddSchedule(result);
        }
        
        private System.IAsyncResult OnBeginAddSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            ServiceTestClient.SessionServiceReference.Schedule schedule = ((ServiceTestClient.SessionServiceReference.Schedule)(inValues[1]));
            return this.BeginAddSchedule(id, schedule, callback, asyncState);
        }
        
        private object[] OnEndAddSchedule(System.IAsyncResult result) {
            ServiceTestClient.SessionServiceReference.Schedule retVal = this.EndAddSchedule(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddScheduleCompleted(object state) {
            if ((this.AddScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddScheduleCompleted(this, new AddScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddScheduleAsync(int id, ServiceTestClient.SessionServiceReference.Schedule schedule) {
            this.AddScheduleAsync(id, schedule, null);
        }
        
        public void AddScheduleAsync(int id, ServiceTestClient.SessionServiceReference.Schedule schedule, object userState) {
            if ((this.onBeginAddScheduleDelegate == null)) {
                this.onBeginAddScheduleDelegate = new BeginOperationDelegate(this.OnBeginAddSchedule);
            }
            if ((this.onEndAddScheduleDelegate == null)) {
                this.onEndAddScheduleDelegate = new EndOperationDelegate(this.OnEndAddSchedule);
            }
            if ((this.onAddScheduleCompletedDelegate == null)) {
                this.onAddScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginAddScheduleDelegate, new object[] {
                        id,
                        schedule}, this.onEndAddScheduleDelegate, this.onAddScheduleCompletedDelegate, userState);
        }
        
        public void DeleteSchedule(int id) {
            base.Channel.DeleteSchedule(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteSchedule(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteSchedule(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteSchedule(System.IAsyncResult result) {
            base.Channel.EndDeleteSchedule(result);
        }
        
        private System.IAsyncResult OnBeginDeleteSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteSchedule(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteSchedule(System.IAsyncResult result) {
            this.EndDeleteSchedule(result);
            return null;
        }
        
        private void OnDeleteScheduleCompleted(object state) {
            if ((this.DeleteScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteScheduleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteScheduleAsync(int id) {
            this.DeleteScheduleAsync(id, null);
        }
        
        public void DeleteScheduleAsync(int id, object userState) {
            if ((this.onBeginDeleteScheduleDelegate == null)) {
                this.onBeginDeleteScheduleDelegate = new BeginOperationDelegate(this.OnBeginDeleteSchedule);
            }
            if ((this.onEndDeleteScheduleDelegate == null)) {
                this.onEndDeleteScheduleDelegate = new EndOperationDelegate(this.OnEndDeleteSchedule);
            }
            if ((this.onDeleteScheduleCompletedDelegate == null)) {
                this.onDeleteScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteScheduleDelegate, new object[] {
                        id}, this.onEndDeleteScheduleDelegate, this.onDeleteScheduleCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> AllSlots() {
            return base.Channel.AllSlots();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAllSlots(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAllSlots(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndAllSlots(System.IAsyncResult result) {
            return base.Channel.EndAllSlots(result);
        }
        
        private System.IAsyncResult OnBeginAllSlots(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginAllSlots(callback, asyncState);
        }
        
        private object[] OnEndAllSlots(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> retVal = this.EndAllSlots(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAllSlotsCompleted(object state) {
            if ((this.AllSlotsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AllSlotsCompleted(this, new AllSlotsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AllSlotsAsync() {
            this.AllSlotsAsync(null);
        }
        
        public void AllSlotsAsync(object userState) {
            if ((this.onBeginAllSlotsDelegate == null)) {
                this.onBeginAllSlotsDelegate = new BeginOperationDelegate(this.OnBeginAllSlots);
            }
            if ((this.onEndAllSlotsDelegate == null)) {
                this.onEndAllSlotsDelegate = new EndOperationDelegate(this.OnEndAllSlots);
            }
            if ((this.onAllSlotsCompletedDelegate == null)) {
                this.onAllSlotsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAllSlotsCompleted);
            }
            base.InvokeAsync(this.onBeginAllSlotsDelegate, null, this.onEndAllSlotsDelegate, this.onAllSlotsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> AllBreaks() {
            return base.Channel.AllBreaks();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAllBreaks(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAllBreaks(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndAllBreaks(System.IAsyncResult result) {
            return base.Channel.EndAllBreaks(result);
        }
        
        private System.IAsyncResult OnBeginAllBreaks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginAllBreaks(callback, asyncState);
        }
        
        private object[] OnEndAllBreaks(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> retVal = this.EndAllBreaks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAllBreaksCompleted(object state) {
            if ((this.AllBreaksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AllBreaksCompleted(this, new AllBreaksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AllBreaksAsync() {
            this.AllBreaksAsync(null);
        }
        
        public void AllBreaksAsync(object userState) {
            if ((this.onBeginAllBreaksDelegate == null)) {
                this.onBeginAllBreaksDelegate = new BeginOperationDelegate(this.OnBeginAllBreaks);
            }
            if ((this.onEndAllBreaksDelegate == null)) {
                this.onEndAllBreaksDelegate = new EndOperationDelegate(this.OnEndAllBreaks);
            }
            if ((this.onAllBreaksCompletedDelegate == null)) {
                this.onAllBreaksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAllBreaksCompleted);
            }
            base.InvokeAsync(this.onBeginAllBreaksDelegate, null, this.onEndAllBreaksDelegate, this.onAllBreaksCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> AllAssignableSlots() {
            return base.Channel.AllAssignableSlots();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAllAssignableSlots(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAllAssignableSlots(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndAllAssignableSlots(System.IAsyncResult result) {
            return base.Channel.EndAllAssignableSlots(result);
        }
        
        private System.IAsyncResult OnBeginAllAssignableSlots(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginAllAssignableSlots(callback, asyncState);
        }
        
        private object[] OnEndAllAssignableSlots(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> retVal = this.EndAllAssignableSlots(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAllAssignableSlotsCompleted(object state) {
            if ((this.AllAssignableSlotsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AllAssignableSlotsCompleted(this, new AllAssignableSlotsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AllAssignableSlotsAsync() {
            this.AllAssignableSlotsAsync(null);
        }
        
        public void AllAssignableSlotsAsync(object userState) {
            if ((this.onBeginAllAssignableSlotsDelegate == null)) {
                this.onBeginAllAssignableSlotsDelegate = new BeginOperationDelegate(this.OnBeginAllAssignableSlots);
            }
            if ((this.onEndAllAssignableSlotsDelegate == null)) {
                this.onEndAllAssignableSlotsDelegate = new EndOperationDelegate(this.OnEndAllAssignableSlots);
            }
            if ((this.onAllAssignableSlotsCompletedDelegate == null)) {
                this.onAllAssignableSlotsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAllAssignableSlotsCompleted);
            }
            base.InvokeAsync(this.onBeginAllAssignableSlotsDelegate, null, this.onEndAllAssignableSlotsDelegate, this.onAllAssignableSlotsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> GetNotAssignedSlots() {
            return base.Channel.GetNotAssignedSlots();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNotAssignedSlots(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNotAssignedSlots(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> EndGetNotAssignedSlots(System.IAsyncResult result) {
            return base.Channel.EndGetNotAssignedSlots(result);
        }
        
        private System.IAsyncResult OnBeginGetNotAssignedSlots(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetNotAssignedSlots(callback, asyncState);
        }
        
        private object[] OnEndGetNotAssignedSlots(System.IAsyncResult result) {
            System.Collections.Generic.List<ServiceTestClient.SessionServiceReference.Slot> retVal = this.EndGetNotAssignedSlots(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNotAssignedSlotsCompleted(object state) {
            if ((this.GetNotAssignedSlotsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNotAssignedSlotsCompleted(this, new GetNotAssignedSlotsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNotAssignedSlotsAsync() {
            this.GetNotAssignedSlotsAsync(null);
        }
        
        public void GetNotAssignedSlotsAsync(object userState) {
            if ((this.onBeginGetNotAssignedSlotsDelegate == null)) {
                this.onBeginGetNotAssignedSlotsDelegate = new BeginOperationDelegate(this.OnBeginGetNotAssignedSlots);
            }
            if ((this.onEndGetNotAssignedSlotsDelegate == null)) {
                this.onEndGetNotAssignedSlotsDelegate = new EndOperationDelegate(this.OnEndGetNotAssignedSlots);
            }
            if ((this.onGetNotAssignedSlotsCompletedDelegate == null)) {
                this.onGetNotAssignedSlotsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotAssignedSlotsCompleted);
            }
            base.InvokeAsync(this.onBeginGetNotAssignedSlotsDelegate, null, this.onEndGetNotAssignedSlotsDelegate, this.onGetNotAssignedSlotsCompletedDelegate, userState);
        }
    }
}
